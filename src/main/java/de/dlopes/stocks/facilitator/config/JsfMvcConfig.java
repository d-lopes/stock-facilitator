package de.dlopes.stocks.facilitator.config;

import javax.faces.webapp.FacesServlet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;
import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.faces.mvc.JsfView;
import org.springframework.faces.webflow.JsfFlowHandlerAdapter;
import org.springframework.web.servlet.DispatcherServlet;
import org.springframework.web.servlet.mvc.UrlFilenameViewController;
import org.springframework.web.servlet.view.UrlBasedViewResolver;
import org.springframework.webflow.mvc.servlet.FlowHandlerAdapter;
import org.springframework.webflow.mvc.servlet.FlowHandlerMapping;

import com.sun.faces.config.ConfigureListener;


/**
 * This class provides the annotation based JSF and Spring MVC config that would 
 * traditionally be located in the web.xml and application-context.xml
 * 
 * @author Dominique Lopes
 *
 */
@Configuration
public class JsfMvcConfig {

	/*
	 * configuration of context parameters is done by means of entries of 
	 * server.context-parameters.* in the application.properties 
	 */
	
	/*
	 * webflow configuration is configured elsewhere, but automatically injected 
	 */
	@Autowired
	private WebFlowConfig webFlowConfig;
	
	/*
	 * create a Spring MVC dispatcher servlet so that we can slightly modify its
	 * config within the environment automatically generated by spring boot
	 * 
	 * Hint: if we don't do that there will be two instances and all modifications
	 * to the config  
	 */
	@Bean 
	public DispatcherServlet dispatcherServlet() {
		return new DispatcherServlet();
	}
	
	/*
	 * Register the Spring MVC dispatcher servlet under the context path '/app/*'
	 * 
	 * hint: we need to do this otherwise there will be an overlap with JSF's
	 * FacesServlet 
	 */
	@Bean
    public ServletRegistrationBean dispatcherServletRegistration() {
        ServletRegistrationBean registration = new ServletRegistrationBean(dispatcherServlet());
        registration.setLoadOnStartup(1);
        registration.setName(DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME);
        registration.addUrlMappings("/app/*");
        return registration;
    }
	
	/*
	 * Register the JSF's Faces servlet
	 * 
	 * Hint: this is needed for proper initialization of JSF
	 */
	@Bean
    public ServletRegistrationBean facesServletRegistration() {
        ServletRegistrationBean registration = new ServletRegistrationBean(
            new FacesServlet(), "*.faces");
        registration.setLoadOnStartup(1);
        return registration;
    }

	/*
	 * Register JSF's configure listener
	 * 
	 * Hint: this is needed for proper initialization of JSF
	 */
    @Bean
    public ServletListenerRegistrationBean<ConfigureListener> jsfConfigureListener() {
        return new ServletListenerRegistrationBean<ConfigureListener>(
            new ConfigureListener());
    }
	
	/*
	 * Maps request paths to flows in the flowRegistry; e.g. a path of 
	 * /stock-info looks for a flow with id "stock-info" 
	 */
	@Bean
	public FlowHandlerMapping flowHandlerMapping() {
		FlowHandlerMapping mapping = new FlowHandlerMapping();
		mapping.setOrder(1);
		mapping.setFlowRegistry(this.webFlowConfig.flowRegistry());
		
		/* If no flow matches, map the path to a view, e.g. "/index" maps to a 
		 * view named "index" */
		mapping.setDefaultHandler(new UrlFilenameViewController());
		return mapping;
	}

	/*
	 * Dispatches requests mapped to flows to FlowHandler implementations
	 */
	@Bean
	public FlowHandlerAdapter flowHandlerAdapter() {
		JsfFlowHandlerAdapter adapter = new JsfFlowHandlerAdapter();
		adapter.setFlowExecutor(this.webFlowConfig.flowExecutor());
		return adapter;
	}

	/*
	 * Resolves views selected for rendering by @Controllers to .xhtml 
	 * resources in the /WEB-INF/views directory 
	 */
	@Bean
	public UrlBasedViewResolver faceletsViewResolver() {
		UrlBasedViewResolver resolver = new UrlBasedViewResolver();
		resolver.setViewClass(JsfView.class);
		resolver.setPrefix("/WEB-INF/views/");
		resolver.setSuffix(".xhtml");
		return resolver;
	}

//	@Bean
//	public SimpleControllerHandlerAdapter simpleControllerHandlerAdapter() {
//		return new SimpleControllerHandlerAdapter();
//	}
//	
}